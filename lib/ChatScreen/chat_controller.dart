import 'dart:convert';

import 'package:flutter/animation.dart';
import 'package:flutter/cupertino.dart';
import 'package:get/get.dart';
import 'package:hive/hive.dart';
import 'package:http/http.dart' as http;

class ChatController extends GetxController {
  final TextEditingController textC = TextEditingController();
  final ScrollController scrollC = ScrollController();
  final RxList<Map<String, String>> list = <Map<String, String>>[].obs; // Explicitly typed RxList
  final String apiKey = "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";
  final String apiUrl = "https://api.groq.com/openai/v1/chat/completions";

  final isLoading = false.obs;
  late Box chatBox;

  @override
  void onInit() {
    super.onInit();
    chatBox = Hive.box('chatBox');

    // Load l·ªãch s·ª≠ chat khi m·ªü app
    final saved = chatBox.get('messages', defaultValue: []);
    if (saved is List && saved.isNotEmpty) {
      list.addAll(saved.map((e) => Map<String, String>.from(e)));
    } else {
      // üëá N·∫øu ch∆∞a c√≥ d·ªØ li·ªáu, th√™m tin nh·∫Øn ch√†o m·∫∑c ƒë·ªãnh
      list.add({
        "role": "assistant",
        "content": "Xin ch√†o! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n v·ªÅ lu·∫≠t c·ªßa Vi·ªát Nam?"
      });
      saveMessages();
    }
  }

  @override
  void onClose() {
    textC.dispose();
    scrollC.dispose();
    super.onClose();
  }

  Future<void> askQuestion() async {
    String userPrompt = textC.text;
    if (userPrompt.isEmpty) return;

    list.add({"role": "user", "content": userPrompt});

    try {
      final response = await http.post(
        Uri.parse(apiUrl),
        headers: {
          "Authorization": "Bearer $apiKey",
          "Content-Type": "application/json",
          "X-Title": "chatbot",
        },
        body: jsonEncode({
          "model": "meta-llama/llama-4-scout-17b-16e-instruct",
          "messages": [
            {
              "role": "system",
              "content":
              "B·∫°n l√† m·ªôt tr·ª£ l√Ω ph√°p lu·∫≠t. B·∫°n ch·ªâ tr·∫£ l·ªùi c√°c c√¢u h·ªèi li√™n quan ƒë·∫øn lu·∫≠t ph√°p Vi·ªát Nam. "
                  "N·∫øu c√¢u h·ªèi kh√¥ng li√™n quan ƒë·∫øn lu·∫≠t Vi·ªát Nam, h√£y tr·∫£ l·ªùi ƒë√∫ng m·ªôt c√¢u: "
                  "\"C√¢u h·ªèi c·ªßa b·∫°n kh√¥ng n·∫±m trong lƒ©nh v·ª±c lu·∫≠t Vi·ªát Nam.\""
            },
            {
              "role": "user",
              "content": userPrompt
            }
          ],
          "max_tokens": 1000,
          "temperature": 0.3, // gi·∫£m ƒë·ªÉ AI tr·∫£ l·ªùi ch√≠nh x√°c, √≠t s√°ng t·∫°o
        }),
      );

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        final aiResponse = data['choices'][0]['message']['content'];
        print(aiResponse);
        list.add({"role": "assistant", "content": aiResponse});
      } else {
        list.add({"role": "assistant", "content": "L·ªói API: ${response.statusCode} - ${response.body}"});
      }
    } catch (e) {
      list.add({"role": "assistant", "content": "L·ªói k·∫øt n·ªëi: $e. Vui l√≤ng ki·ªÉm tra API Key ho·∫∑c m·∫°ng."});
    }

    textC.clear();
    scrollC.animateTo(
      scrollC.position.maxScrollExtent,
      duration: Duration(milliseconds: 300),
      curve: Curves.easeOut,
    );
    update(); // Ensure UI updates
    saveMessages();
  }

  void saveMessages() {
    chatBox.put('messages', list.toList());
  }
}
